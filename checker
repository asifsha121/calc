import React, { useState } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, TextInput } from 'react-native';

export default function App() {
  const [expression, setExpression] = useState('');

  const handleButtonPress = (value) => {
    setExpression((prevExpression) => prevExpression + value);
  };

  const handleClear = () => {
    setExpression('');
  };

  const handleEvaluate = () => {
    try {
      setExpression(eval(expression).toString());
    } catch (error) {
      setExpression('Error');
    }
  };

  const handleButtonAction = (value) => {
    const actions = [
      { value: '0', action: handleButtonPress },
      { value: '1', action: handleButtonPress },
      { value: '2', action: handleButtonPress },
      { value: '3', action: handleButtonPress },
      { value: '4', action: handleButtonPress },
      { value: '5', action: handleButtonPress },
      { value: '6', action: handleButtonPress },
      { value: '7', action: handleButtonPress },
      { value: '8', action: handleButtonPress },
      { value: '9', action: handleButtonPress },
      { value: '.', action: handleButtonPress },
      { value: '=', action: handleEvaluate },
      { value: '+', action: handleButtonPress },
      { value: '-', action: handleButtonPress },
      { value: '*', action: handleButtonPress },
      { value: '/', action: handleButtonPress },
      { value: '%', action: handleButtonPress },
    ];

    const selectedAction = actions.find((action) => action.value === value);

    if (selectedAction) {
      selectedAction.action(value === '=' ? null : value);
    }
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        value={expression}
        onChangeText={(text) => setExpression(text)}
        keyboardType="numeric"
      />
      <View style={styles.display}>
        <Text style={styles.expression}>{expression}</Text>
      </View>
      {[7, 8, 9, '/'].map((value) => (
        <TouchableOpacity
          key={value}
          style={styles.button}
          onPress={() => handleButtonAction(value)}
        >
          <Text style={styles.buttonText}>{value}</Text>
        </TouchableOpacity>
      ))}
      {[4, 5, 6, '*'].map((value) => (
        <TouchableOpacity
          key={value}
          style={styles.button}
          onPress={() => handleButtonAction(value)}
        >
          <Text style={styles.buttonText}>{value}</Text>
        </TouchableOpacity>
      ))}
      {[1, 2, 3, '-'].map((value) => (
        <TouchableOpacity
          key={value}
          style={styles.button}
          onPress={() => handleButtonAction(value)}
        >
          <Text style={styles.buttonText}>{value}</Text>
        </TouchableOpacity>
      ))}
      {[0, '.', '=', '+'].map((value) => (
        <TouchableOpacity
          key={value}
          style={styles.button}
          onPress={() => handleButtonAction(value)}
        >
          <Text style={styles.buttonText}>{value}</Text>
        </TouchableOpacity>
      ))}
      <TouchableOpacity
        style={styles.button}
        onPress={() => handleClear()}
      >
        <Text style={styles.buttonText}>C</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'flex-end',
    padding: 10,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    textAlign: 'right',
    fontSize: 18,
  },
  display: {
    backgroundColor: '#f0f0f0',
    padding: 10,
    marginBottom: 10,
  },
  expression: {
    fontSize: 24,
    textAlign: 'right',
  },
  button: {
    flex: 1,
    backgroundColor: '#4CAF50',
    padding: 20,
    margin: 5,
    borderRadius: 5,
    alignItems: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 20,
  },
});